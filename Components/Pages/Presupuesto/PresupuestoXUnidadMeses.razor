@page "/presupuesto/{unidad}/{rubro}"

@using Blazorise.Charts
@using Blazorise.Charts.Trendline
@using EstadisticaApp.Models

@inject NavigationManager Navigation
@inherits CreateViewModel<VMPresupuestosMain>

<Div Class="row" Style="width:100vw;height:100%;">
   
    <Div Class="col-lg-10 col-md-12 col-sm-12 col-xs-12 pt-2 pe-2 mb-3">
        <h4 class="ms-2">Presupuesto de @unidad, por Mes </h4>
        <Chart @ref="chart" TItem="double?" Type="ChartType.Line">
            <ChartTrendline @ref="chartTrendline" TItem="double?" />
        </Chart>
        @*Body*@
    </Div>

    <Div Class="col-lg-2 col-md-12 col-sm-12 col-xs-12 px-auto mb-3" Style="overflow-y:auto;margin-left:1rem;box-shadow: 0px -12px 11px -6px rgba(0,0,0,0.2);">
        <div class="list-group">
            <button type="button" class="list-group-item bg-primary p-2 disabled" aria-current="true">
                <Icon Name="IconName.Filter" IconSize="IconSize.Large" Margin="Margin.Is1" TextColor="TextColor.White"/>
            </button>
            <button type="button" class="list-group-item list-group-item-action" onclick="@(()=>Navigation.NavigateTo("/presupuesto/Oficinas Centrales/01"))">Sistema DIF</button>
            <button type="button" class="list-group-item list-group-item-action" onclick="@(()=>Navigation.NavigateTo("/presupuesto/Junta de Asistencia/02"))">Junta de Asistencia</button>
            <button type="button" class="list-group-item list-group-item-action" onclick="@(()=>Navigation.NavigateTo("/presupuesto/Hopital del Niño/03"))">Hospital Del Niño</button>
            <button type="button" class="list-group-item list-group-item-action" onclick="@(()=>Navigation.NavigateTo("/presupuesto/CRIH/04"))">CRIH</button>
            <button type="button" class="list-group-item list-group-item-action" onclick="@(()=>Navigation.NavigateTo("/presupuesto/Procuraduría/05"))">
                Procuraduría              
            </button>
        </div>        
    </Div>

</Div>

@code {

    [Parameter]
    public string? unidad{ set; get; }

    [Parameter]
    public string? rubro{ set; get; }

    Chart<double?> chart;
    ChartTrendline<double?> chartTrendline;

    //Toma los parametros para observarlos
    public override Task SetParametersAsync(ParameterView parameters)
    {

        return base.SetParametersAsync(parameters);
    }
    //Ejecuta un renderizado cada que recibe parametros nuevos
    protected async override Task OnParametersSetAsync()
    {
        await ViewModel.unidadMes(rubro);
        await HandleRedraw();
        await base.OnParametersSetAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ViewModel.unidadMes(rubro);
            await HandleRedraw();
        }
    }
    async Task HandleRedraw()
    {
        if (chart != null) {
            await chart.Clear();
            await chart.AddLabels(ViewModel.Meses);

            await chart.AddDataSet( GetLineChartDataset("imp_Modificado"));
            await chart.AddDataSet(GetLineChartDataset("Imp_Comp_Dev_Eje_Pagado"));
            await chart.Update();
        }

    }
    //Recibiria el tipo de egreso para crea el objeto para cada, suma de presupuesto
    LineChartDataset<double?> GetLineChartDataset(string tipo)
    {
        return new LineChartDataset<double?>
            {
                Label = ViewModel.TipoGasto(tipo),
                Data =  ViewModel.EgresoMes(tipo),
                BackgroundColor = backgroundColors,
                BorderColor = borderColors,
                Fill = true,
                PointRadius = 6,
                BorderDash = new List<int> { }
            };
    }

    

    List<string> backgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };

} 