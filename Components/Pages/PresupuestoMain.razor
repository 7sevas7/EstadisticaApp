@page "/presupuesto"

@using Blazorise.Charts
@using Blazorise.Charts.Trendline
@using EstadisticaApp.Components.Layout

@using EstadisticaApp.Models
@using EstadisticaApp.Utilities
@using EstadisticaApp.Components.components
@using Radzen
@using Radzen.Blazor
@using System.Diagnostics
@using System.Globalization

@inherits CreateViewModel<VMPresupuestosMain>
@inject NavigationManager Navigation

@inject DialogService DialogService



<div class="row">
    <div class="col-12">
            
        <RadzenChart style="height:150vh;" >
        <RadzenBarSeries Data="@ViewModel.TotalesDic["modificado"].ToList()" CategoryProperty="Quarter" Title="Egreso (Modificado)" ValueProperty="Revenue" LineType="LineType.Dashed" Fill="#4340d2">
                <RadzenSeriesDataLabels Visible="@showDataLabels"  />
            </RadzenBarSeries>
        <RadzenBarSeries Data="@ViewModel.TotalesDic["ejercido"].ToList()" CategoryProperty="Quarter" Title="Ejercido" ValueProperty="Revenue" Fill="#4caf50">
                <RadzenSeriesDataLabels Visible="@showDataLabels"   />
        </RadzenBarSeries>
        <RadzenBarSeries Data="@ViewModel.TotalesDic["ingresos"].ToList()" CategoryProperty="Quarter" Title="Recaudo" ValueProperty="Revenue" Fill="#f44336">
            <RadzenSeriesDataLabels Visible="@showDataLabels" />
        </RadzenBarSeries>
            <RadzenBarOptions Radius="5" Height="55" Margin="20" />
            <RadzenValueAxis Formatter="@FormatAsUSD" >
                <RadzenGridLines Visible="true"  />                    
            </RadzenValueAxis>
                
        </RadzenChart>

    </div>

        <Donut/>
</div>

<style>
    .rz-series-data-label {
        fill: black !important;
    }
</style>
    
@code {

    [Inject]
    private ComponentEvents componentEvents { set; get; }
    private List<string> unidadestext = new();

    private string EstateLoader{ set; get; }


    bool showDataLabels = true;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            
        }
    }

    string FormatAsUSD(object value)
    {
        return ((double)value).ToString("C0", CultureInfo.CreateSpecificCulture("es-MX"));
    }

    protected override void OnInitialized()
    {        
        componentEvents.EventoState(this, new ServiceTitle { State = "Presupuesto por Unidad Presupuestal" });
        componentEvents.Eventos += EventHandler;
    }
    public void EventHandler(object sender, ServiceTitle serviceArg)
    {
        unidadestext = serviceArg.TextUnidad;
        StateHasChanged();
    }
    void BusyDialog()
    {
        DialogService.Open("", ds =>
    @<RadzenStack AlignItems="AlignItems.Center" Gap="2rem" Class="rz-p-12 rounded">
        <RadzenText TextStyle="TextStyle.DisplayH6"> @EstateLoader</RadzenText>
        <div class="loader"></div>
    </RadzenStack>, new DialogOptions() { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto", CloseDialogOnEsc = false });
    }
}
@*
@if (false)
{
    <Div Class="row" Style="width:100vw;height:100%;">

       <Div Class="col-1"></Div>
        <Div Class="col-lg-10 col-md-12 col-sm-12 col-xs-12 pt-2  mb-3" >
            <h4>Presupuesto Acumulado por unidad</h4>
            <Button Color="Color.Primary" Outline Clicked="@((rr)=>ShowDialogUpdateTable())">
                 <Icon Name="IconName.SyncAlt" TextColor="TextColor.Dark" IconSize="IconSize.Large" />
                 <p>14/12/2023(Ultima Actualización)</p>
             </Button>
            <Chart @ref="chart" TItem="double?" Type="ChartType.Line" >
                <ChartTrendline @ref="chartTrendline" TItem="double?" />
            </Chart>
            <Div Class="row">
                <Donut/>
            </Div>
            
        </Div>
            
 </Div>
}

else
{
    <h1>Carga</h1>
}

@code{
    bool seVe = false;
    [Inject]
    private ComponentEvents componentEvents{ set; get; }

    private List<string> unidadestext = new();

    //Estados
    public string EstateLoader { set; get; }
    protected override void OnInitialized(){
        componentEvents.EventoState(this,new ServiceTitle{State = "Presupuesto por Unidad Presupuestal"});
        componentEvents.Eventos += EventHandler;
    }
    public void EventHandler(object sender, ServiceTitle serviceArg)
    {
        unidadestext = serviceArg.TextUnidad;
        StateHasChanged();    
    }

    Chart<double?> chart;

    ChartTrendline<double?> chartTrendline;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            //sE ARA CON LOS DATOS PARA MOSTRASR 
            //var vacio = ViewModel.Observerender;
            //Dependera que si se puede verificar si no pues negarlo

            try {
                
                BusyDialog();
                ViewModel.borrandoT = false;
                await ViewModel.Reload();


                DialogService.Close();
                await HandleRedraw();
            }
            catch(Exception ex)
            {
                BusyDialog();
                Debug.WriteLine(ex.Message);

            }


        }
    }

    async Task HandleRedraw()
    {

        if (chart != null )
        {
            await chart.Clear();
            await chart.AddLabels(ViewModel.ListaUnidades);

            await chart.AddDataSet(GetLineChartDataset("imp_Modificado"));
            await chart.AddDataSet(GetLineChartDataset("Imp_Comp_Dev_Eje_Pagado"));
            await chart.AddDataSet(GetLineChartDataAcumulado("Recaudo Acumulado"));
            await chart.Update();
        }

    }
    //Ingreso acumulado
    LineChartDataset<double?> GetLineChartDataAcumulado(string tipo)
    {
        return new LineChartDataset<double?>
            {
                Label = tipo,
                Data = ViewModel.AcumuladoIngresoUnidad,
                BackgroundColor = backgroundColors,
                BorderColor = borderColors,
                Fill = true,
                PointRadius = 6,
                BorderDash = new List<int> { }
            };
    }
    LineChartDataset<double?> GetLineChartDataset(string tipo)
    {
        return new LineChartDataset<double?>
            {
                Label = ViewModel.TipoGasto(tipo),
                Data = ViewModel.EgresoUnidadData(tipo),
                BackgroundColor = backgroundColors,
                BorderColor = borderColors,
                Fill = true,
                PointRadius = 6,
                BorderDash = new List<int> { }
            };
    }

    List<string> backgroundColors = new List<string> { "#3e910833", "#36a2eb33", "#91080a33" };
    List<string> borderColors = new List<string> { "#3e9108ff", "#36a2ebff", "#91080aff" };



    async Task ShowDialogUpdateTable(){

        try
        {
            BusyDialog();
            //Borrando la base datos para despues actualizar 
            EstateLoader = "Cargando Nuevos Datos....";
            ViewModel.borrandoT = true;
            await ViewModel.Reload();
            //ViewModel.Observerender = false;
            await HandleRedraw();
            DialogService.Close();
        }
        catch(Exception ex)
        {
            EstateLoader = ex.Message;
            
            
             InvokeAsync(async()=>
            {
                await Task.Delay(2000);
                DialogService.Close();
            ;
             Debug.WriteLine("Tiempos");
            });
            
        }

        


    }

    // Busy dialog from markup
    void BusyDialog()
    {
         DialogService.Open("", ds =>
    @<RadzenStack AlignItems="AlignItems.Center" Gap="2rem" Class="rz-p-12 rounded">
        <RadzenText TextStyle="TextStyle.DisplayH6"> @EstateLoader</RadzenText>
        <div class="loader"></div>
    </RadzenStack>, new DialogOptions() { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto", CloseDialogOnEsc = false });
    }

    // Busy dialog from string
   
}
*@
    <style>
        
.loader {
  width: 60%;
  aspect-ratio: 1;
  color: #f03355;
  position: relative;
  background:
    conic-gradient(from 134deg at top   ,currentColor 92deg,#0000 0) top,
    conic-gradient(from -46deg at bottom,currentColor 92deg,#0000 0) bottom;
  background-size: 100% 50%;
  background-repeat: no-repeat;
}
.loader:before {
  content:'';
  position: absolute;
  inset: 0;
  --g:currentColor 14.5px,#0000 0 calc(100% - 14.5px),currentColor 0;
  background:
    linear-gradient( 45deg,var(--g)),
    linear-gradient(-45deg,var(--g));
   animation: l7 1.5s infinite cubic-bezier(0.3,1,0,1);
}
 @@keyframes l7 {
   33%  {inset:-10px;transform: rotate(0deg)}
   66%  {inset:-10px;transform: rotate(90deg)}
   100% {inset:0    ;transform: rotate(90deg)}
}
 
</style>
    