@page "/presupuesto"

@using Blazorise.Charts
@using Blazorise.Charts.Trendline
@using EstadisticaApp.Components.Layout

@using EstadisticaApp.Models
@using EstadisticaApp.Utilities
@using EstadisticaApp.Components.components
@using Radzen
@using Radzen.Blazor

@inherits CreateViewModel<VMPresupuestosMain>
@inject NavigationManager Navigation

@inject DialogService DialogService



@if (!ViewModel.Observerender)
{
    <Div Class="row" Style="width:100vw;height:100%;">

        <Div Class="col-lg-10 col-md-12 col-sm-12 col-xs-12 pt-2 pe-2 mb-3" >
            <h4>Presupuesto Acumulado por unidad</h4>
            <Chart @ref="chart" TItem="double?" Type="ChartType.Line" >
                <ChartTrendline @ref="chartTrendline" TItem="double?" />
            </Chart>
            
            @*<Donut/>*@
        </Div>

        <Div Class="col-lg-2 col-md-12 col-sm-12 col-xs-12 px-auto my-3 "  Style="overflow-y:auto;">
            <Button Color="Color.Primary" Outline Clicked="@((rr)=>ShowDialogUpdateTable())">
                <Icon Name="IconName.SyncAlt" TextColor="TextColor.Dark" IconSize="IconSize.Large"  />
                    <p>14/12/2023(Ultima Actualización)</p>
            </Button>
            <div class="list-group">
                <button type="button" class="list-group-item bg-primary p-2 disabled" aria-current="true">
                    <Icon Name="IconName.Filter" IconSize="IconSize.Large" Margin="Margin.Is1" TextColor="TextColor.White"/>
                </button>
                <button type="button" class="list-group-item list-group-item-action" onclick="@(()=>Navigation.NavigateTo("/presupuesto/Oficinas Centrales/01"))">Sistema DIF</button>
                <button type="button" class="list-group-item list-group-item-action" onclick="@(()=>Navigation.NavigateTo("/presupuesto/Junta de Asistencia/02"))">Junta de Asistencia</button>
                <button type="button" class="list-group-item list-group-item-action" onclick="@(()=>Navigation.NavigateTo("/presupuesto/Hopital del Niño/03"))">Hospital Del Niño</button>
                <button type="button" class="list-group-item list-group-item-action" onclick="@(()=>Navigation.NavigateTo("/presupuesto/CRIH/04"))">CRIH</button>
                <button type="button" class="list-group-item list-group-item-action" onclick="@(()=>Navigation.NavigateTo("/presupuesto/Procuraduría/05"))">
                    PROCURADURÍA
                </button>
            </div>

        </Div>
 </Div>
}

else
{
    <h1>Carga</h1>
}

@code{
    [Inject]
    private ComponentEvents componentEvents{ set; get; }

    private List<string> unidadestext = new();

    //Estados
    public string EstateLoader { set; get; }
    protected override void OnInitialized(){
        componentEvents.EventoState(this,new ServiceTitle{State = "Presupuesto por Unidad Presupuestal"});
        componentEvents.Eventos += EventHandler;
    }
    public void EventHandler(object sender, ServiceTitle serviceArg)
    {
        unidadestext = serviceArg.TextUnidad;
        StateHasChanged();    
    }

    Chart<double?> chart;

    ChartTrendline<double?> chartTrendline;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var count = ViewModel.Gets();

            await HandleRedraw();

        }
    }

    async Task HandleRedraw()
    {

        if (chart != null && !ViewModel.Observerender)
        {
            await chart.Clear();
            await chart.AddLabels(ViewModel.ListaUnidades);

            await chart.AddDataSet(GetLineChartDataset("imp_Modificado"));
            await chart.AddDataSet(GetLineChartDataset("Imp_Comp_Dev_Eje_Pagado"));
            await chart.AddDataSet(GetLineChartDataAcumulado("Ingreso Acumulado"));
            await chart.Update();
        }

    }
    //Ingreso acumulado
    LineChartDataset<double?> GetLineChartDataAcumulado(string tipo)
    {
        return new LineChartDataset<double?>
            {
                Label = tipo,
                Data = ViewModel.AcumuladoIngresoUnidad,
                BackgroundColor = backgroundColors,
                BorderColor = borderColors,
                Fill = true,
                PointRadius = 6,
                BorderDash = new List<int> { }
            };
    }
    LineChartDataset<double?> GetLineChartDataset(string tipo)
    {
        return new LineChartDataset<double?>
            {
                Label = ViewModel.TipoGasto(tipo),
                Data = ViewModel.EgresoUnidadData(tipo),
                BackgroundColor = backgroundColors,
                BorderColor = borderColors,
                Fill = true,
                PointRadius = 6,
                BorderDash = new List<int> { }
            };
    }

    List<string> backgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };

    

    async Task ShowDialogUpdateTable(){


        BusyDialog();

        //Borrando la base datos para despues actualizar 
            EstateLoader = "Borrando datos locales....";
            await ViewModel.ClearTable();
            EstateLoader = "Cargando Nuevos Datos....";
            await ViewModel.Loaded();

        DialogService.Close();
        

        


    }

    // Busy dialog from markup
    void BusyDialog()
    {
         DialogService.Open("", ds =>
    @<RadzenStack AlignItems="AlignItems.Center" Gap="2rem" Class="rz-p-12 rounded">
        <RadzenText TextStyle="TextStyle.DisplayH6"> @EstateLoader</RadzenText>
        <div class="loader"></div>
    </RadzenStack>, new DialogOptions() { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto", CloseDialogOnEsc = false });
    }

    // Busy dialog from string
   
}

    <style>
        
.loader {
  width: 60%;
  aspect-ratio: 1;
  color: #f03355;
  position: relative;
  background:
    conic-gradient(from 134deg at top   ,currentColor 92deg,#0000 0) top,
    conic-gradient(from -46deg at bottom,currentColor 92deg,#0000 0) bottom;
  background-size: 100% 50%;
  background-repeat: no-repeat;
}
.loader:before {
  content:'';
  position: absolute;
  inset: 0;
  --g:currentColor 14.5px,#0000 0 calc(100% - 14.5px),currentColor 0;
  background:
    linear-gradient( 45deg,var(--g)),
    linear-gradient(-45deg,var(--g));
   animation: l7 1.5s infinite cubic-bezier(0.3,1,0,1);
}
 @@keyframes l7 {
   33%  {inset:-10px;transform: rotate(0deg)}
   66%  {inset:-10px;transform: rotate(90deg)}
   100% {inset:0    ;transform: rotate(90deg)}
}
    </style>