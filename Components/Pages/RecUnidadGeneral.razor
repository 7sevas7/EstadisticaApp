@page "/"
@using EstadisticaApp.Models
@using Blazorise.Charts
@using EstadisticaApp.Utilities
@using Radzen
@using System.Diagnostics

@inject DialogService DialogService

@inherits CreateViewModel<VMRecUnidadGeneral>

<Div  Class="row" Style="width:100vw;">
    <Div Class="d-sm-none d-sm-block col-md-3 col-lg-3"> </Div>

    <Div Class="col-lg-5 col-md-5 col-sm-9 col-xs-9">
        <PieChart @ref="pieChart" TItem="double" />
        @*Body*@
    </Div>

    <Div Class="col-lg-4 col-md-4 col-sm-3 col-xs-3   d-flex justify-content-end p-1 m-0" Margin="Blazorise.Margin.Is3.FromTop" >
        @*Este bar sera un componente*@
        <Button Color="Color.Primary" Outline Clicked="@((rr)=>ShowDialogUpdateTable())">
             <Icon Name="IconName.SyncAlt" TextColor="TextColor.Dark" IconSize="IconSize.Large" />
             <p>14/12/2023(Ultima Actualización)</p>
         </Button>
        <BarClasificacion/>
    </Div>

</Div>


 @code {
    [Inject]
    protected ComponentEvents componentEvents{ set; get; }

    public string EstateLoader { set; get; }
    //Atributos

    public string textoP = string.Empty;


    List<double> unidades;


    PieChart<double> pieChart;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            componentEvents.EventoState(this, new ServiceTitle { State = "Rescaudo por Unidad Presupuestal" });
            var count = await ViewModel.Gets();
            if (count.Count > 0)
            {
                unidades = await ViewModel.SumaUnidadesIngreso();//habra que modificar la consulta
                                                                 //await ViewModel.Guardar();
                await HandleRedraw();
            }
            else
            {

                await ViewModel.Reload();
                unidades = await ViewModel.SumaUnidadesIngreso();//habra que modificar la consulta
                await HandleRedraw();
            }

        }
    }

    async Task HandleRedraw()
    {
        //Titulo de Home, como parte de un estado
        if(pieChart != null){
            await pieChart.Clear();
            //En esta parte podriamos hacer que se añada la acantidad
            object[] label = { "Sistema DIF", "Junta de Asistencia", "Hosítal del Niño", "CRIH", "Procuraduria" };
            setColors(label.Length);
            await pieChart.AddLabels(label);
            await pieChart.AddDataSet(await GetPieChartDataset());
            await pieChart.Update();
        }
    }
    List<string> colorBack = new List<string>();
    List<string> colorBorder = new List<string>();

    void setColors(int lenght)
    {
        string caracteres = "ABCDEF0123456789";
        var segmento = new char[6];
        var random = new Random();
        for (int j = 0; j < lenght; j++)
        {
            for (int i = 0; i < segmento.Length; i++)
            {
                segmento[i] = caracteres[random.Next(caracteres.Length)];
            }

            var color = new String(segmento);
            colorBack.Add("#" + color + "33");
            colorBorder.Add("#" + color + "ff");
        }


    }

    async Task<PieChartDataset<double>> GetPieChartDataset()
    {
        //var data = await ViewModel.SumaUnidadesIngreso();
        return new PieChartDataset<double>
            {
                Data = unidades,
                BackgroundColor = colorBack,
                BorderColor = colorBorder

            };
    }
    async Task ShowDialogUpdateTable(){

        //BusyDialog();
        try
        {
            await ViewModel.Reload();
            unidades = await ViewModel.SumaUnidadesIngreso();

            await HandleRedraw();

        }catch(Exception ex)
        {
            Debug.WriteLine(ex.Message.ToString());    

        }

        // DialogService.Close();


    }

    // Busy dialog from markup
    void BusyDialog()
    {
         DialogService.Open("", ds =>
            @<RadzenStack AlignItems="AlignItems.Center" Gap="2rem" Class="rz-p-12 rounded">
                <RadzenText TextStyle="TextStyle.DisplayH6"> @EstateLoader</RadzenText>
                <div class="loader"></div>
            </RadzenStack>, new DialogOptions() { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto", CloseDialogOnEsc = false });
    }
 

}

<style>

    .loader {
        width: 60%;
        aspect-ratio: 1;
        color: #f03355;
        position: relative;
        background: conic-gradient(from 134deg at top,currentColor 92deg,#0000 0) top, conic-gradient(from -46deg at bottom,currentColor 92deg,#0000 0) bottom;
        background-size: 100% 50%;
        background-repeat: no-repeat;
    }

        .loader:before {
            content: '';
            position: absolute;
            inset: 0;
            --g: currentColor 14.5px,#0000 0 calc(100% - 14.5px),currentColor 0;
            background: linear-gradient( 45deg,var(--g)), linear-gradient(-45deg,var(--g));
            animation: l7 1.5s infinite cubic-bezier(0.3,1,0,1);
        }

    @@keyframes l7 {
        33% {
            inset: -10px;
            transform: rotate(0deg)
        }

        66% {
            inset: -10px;
            transform: rotate(90deg)
        }

        100% {
            inset: 0;
            transform: rotate(90deg)
        }
    }
</style>