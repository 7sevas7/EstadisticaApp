
@using EstadisticaApp.Controllers
@using EstadisticaApp.DataAcces.Implement
@using EstadisticaApp.Models
@using Radzen
@using Radzen.Blazor
@using System.Diagnostics

@inject NavigationManager Navigation


    
<div class="col-12 mt-3">        
    <RadzenText TextStyle="TextStyle.H3">Presupuesto, Gasto y Recaudo Acumulado</RadzenText>
</div>

<div class="col-sm-12 col-lg-12 offset-lg-12">    
    <RadzenChart >        
        <RadzenLegend Position="LegendPosition.Bottom" />
        <RadzenDonutSeries Data="@revenue" Title="Title" CategoryProperty="Quarter" ValueProperty="Revenue" InnerRadius="230" Radius="280" Y="300" Fills="@colores" TotalAngle="180" StartAngle="180">
            
            <ChildContent>
            <RadzenMarkers MarkerType="MarkerType.Circle" />
                <RadzenSeriesDataLabels Visible="true"  />
            </ChildContent>
            <TitleTemplate>
    <div class="rz-donut-content w-75 mx-auto" style="transform:translateY(-100px); ">
        <RadzenText TextStyle="TextStyle.H6" Style="color:var(--rz-primary-light);">Modificado</RadzenText>                        
        <RadzenBadge BadgeStyle="BadgeStyle.Primary" Shade="Shade.Lighter" class="price-badge" Text=@($"${totalModificado.ToString("N2", new System.Globalization.CultureInfo("en-US"))}") />

    </div>
            </TitleTemplate>
        </RadzenDonutSeries>
    </RadzenChart>   
</div>
    
@*Listas*@         
<div class="row col-12">
    <div class="col-11 mx-auto"> 
        <RadzenDataList AllowVirtualization="@allowVirtual" WrapItems="@(!allowVirtual)" AllowPaging="@(!allowVirtual)" IsLoading="@isLoading" LoadData="@LoadData"
                        Data="@UnidadesPresupuestos" Count="@count" TItem="UnidadesPresupuesto" PageSize="5" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true">
            <Template Context="UnidadesPresupuestos">
                <RadzenCard Style="width: 100%; padding: 0;">
                <RadzenRow Gap="0">
                    @*Elementos*@

                        @*Primer Columna*@
                        <RadzenColumn Size="12" SizeLG="2" Class="rz-p-4 product-title ">
                            <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H5" class="rz-color-white" >@(RubroText(UnidadesPresupuestos.Cve_Rubro_Ingreso))</RadzenText>
                        </RadzenColumn>

                        @*Segunda Columna*@
                        <RadzenColumn Size="12" SizeLG="8"  Class="rz-p-4">
                            <RadzenRow Gap="1">
                                <RadzenColumn Size="12" SizeXS="6" SizeMD="4" SizeLG="4" Class="rz-mb-2">
                                    <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5">Modificado</RadzenText>                            
                                    <RadzenBadge BadgeStyle="BadgeStyle.Primary" Shade="Shade.Lighter" class="price-badge" Text=@($"{String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", UnidadesPresupuestos.imp_Modificado)}") />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeXS="6" SizeMD="4" SizeLG="4">
                                    <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" Class="rz-mb-2">Recaudado</RadzenText>
                                    <RadzenBadge BadgeStyle="BadgeStyle.Success" Shade="Shade.Lighter" class="price-badge" Text=@($"{String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", UnidadesPresupuestos.Ejecutado)}") />
                            
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeXS="6" SizeMD="4" SizeLG="4">
                                    <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" Class="rz-mb-2">Gastado</RadzenText>
                            
                                    <RadzenBadge BadgeStyle="BadgeStyle.Light" Shade="Shade.Lighter" class="price-badge" Text=@($"{String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", UnidadesPresupuestos.Imp_Comp_Dev_Eje_Pagado)}") />
                                </RadzenColumn>        
                            </RadzenRow>
                        </RadzenColumn>
                        
                        @*Tercer Columna*@
                        <RadzenColumn Size="12"  SizeLG="2" SizeMD="12" SizeXS="12" Class="rz-p-4">
                            <RadzenButton Class="w-100" Text="Ver detalles" Click=@(()=>Navigation.NavigateTo($"/presupuesto/{UnidadesPresupuestos.Cve_Rubro_Ingreso}")) />
                        </RadzenColumn>                   
                </RadzenRow>

                </RadzenCard>
            </Template>

        </RadzenDataList>
    </div>
</div>

<style>
.product-title {
    min-height: 72px;
        background-color: #a93e55;
        color:white;
}
.price-badge {
    font-size: 16px;
    font-weight: bold;
    line-height: 20px;
    padding: 8px;
}
</style>

@code {

    bool allowVirtual;
    bool isLoading;
    //Nuemero de elementos
    int count;
    double totalModificado;
    static double totalgastado;
    static double porGastar;

    string[] rubros = new string[] { "01","02","03","04","05"};

    private PresupuestoMain<UnidadesPresupuesto> consultaPresupuesto = new PresupuestoMain<UnidadesPresupuesto>();

    private ControlApiDBEgreso<UnidadesPresupuesto> TotalRubro = new ControlApiDBEgreso<UnidadesPresupuesto>();
    //Lista enumerada
    IEnumerable<UnidadesPresupuesto> UnidadesPresupuestos;

    async Task LoadData()
    {
        var lista = await TotalRubro.AcumuladoUnidad();

        foreach (var item in lista)
        {
            
            item.Ejecutado = await consultaPresupuesto.IngresoUnidad(item.Cve_Rubro_Ingreso);
            //item.Cve_Rubro_Ingreso = RubroText(item.Cve_Rubro_Ingreso);
            
            Debug.WriteLine(item.Cve_Rubro_Ingreso);

        }

        UnidadesPresupuestos = lista as IEnumerable<UnidadesPresupuesto>;
        count = lista.Count;
        isLoading = false;


    }
    string? RubroText(string rubrosCve)
    {
        Dictionary<string, string> Rubrotext = new Dictionary<string, string>
        {
         {"01","Sistema DIF"},
         {"02","Junta de Asistencia" },
        {"03","Hospital del Niño"},
        {"04","CRIH"},
        { "05",  "Procuraduría"}

        };
        return Rubrotext[rubrosCve];
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            await LoadData();
            totalModificado = await TotalColumna("imp_Modificado") ?? 0;
            totalgastado = await TotalColumna("Imp_Comp_Dev_Eje_Pagado") ?? 0;
            Regla();

        }
    }
    //Total acumulado de todos los rubros, por columna
    async Task<double?> TotalColumna(string columna)    
    {
        double? suma = 0;
        foreach (var item in rubros)
        {
            suma += await consultaPresupuesto.UnTotal(item,columna);
        }
        return suma;
    }

    DataItem[] revenue;
    void Regla()
    {

        porGastar = totalModificado - totalgastado;

        totalgastado = Convert.ToDouble(totalgastado.ToString("N2"));
        porGastar =    Convert.ToDouble(porGastar.ToString("N2"));

        revenue = new DataItem[]
        {
         new DataItem{Quarter = "Gastado",Revenue = totalgastado,Title = "jaj"},  
         new DataItem{Quarter = "Por Gastar", Revenue = porGastar,Title = "joj"}
        };
    }

    bool showDataLabels = false;

    class DataItem
    {
        public string Quarter { get; set; }
        public double Revenue { get; set; }
        public string Title { get; set; }


    }

    IEnumerable<string> colores = new string[] { "#36a2eb", "#939393" };

    public  string TipoGasto(string tipo)
    {
        
        switch (tipo)
        {
            case "imp_Modificado":
                return "Modificado";
            case "Imp_Comp_Dev_Eje_Pagado":
                return "Egreso";

            case "Egreso_Imp_aprobado":
                return "Aprobado";
            default:
                return "--";
        }

    }


} 